list = collections$deque( collections$deque())
list = collections$deque(collections$deque())
collections = import("collections")
library(reticulate)
reticulate::use_python(python = '/anaconda3/bin/python3', required = T)
sys <- import("sys")
sys$version
img = []
library(keras)
collections = import("collections")
list = collections$deque(collections$deque())
View(list)
layer_names <- list("block1_conv2", "predictions")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
load_all()
library(devtools)
load_all()
library(reticulate)
library(keras)
library(keras)
load_all()
load_all()
load_all()
#Changing reticulate to use python 3
reticulate::use_python(python = '/anaconda3/bin/python3', required = T)
load_all()
which python
check_and_install_package(("keras"))
#Function that checks if the R package exists and installs if it isn't installed
check_and_install_package <- function(packageName){
if (!is.installed(packageName)){
install.packages(packageName)
}
else{
x <- paste(packageName, " is already installed")
}
}
check_and_install_package(("keras"))
#Function that checks if the R package exists and installs if it isn't installed
check_and_install_package <- function(packageName){
if (!is.element(packageName, installed.packages()[,1])){
install.packages(packageName)
}
else{
x <- paste(packageName, " is already installed")
}
}
check_and_install_package(("keras"))
library(keras)
check_and_install_package(("keras"))
check_and_install_package("keras")
#Function that checks if the R package exists and installs if it isn't installed
check_and_install_package <- function(packageName){
print("hi")
if (!is.element(packageName, installed.packages()[,1])){
install.packages(packageName)
}
else{
x <- paste(packageName, " is already installed")
}
}
check_and_install_package("keras")
check_and_install_package("keras")
#Function that checks if the R package exists and installs if it isn't installed
check_and_install_package <- function(packageName){
print("hi")
if (!is.element(packageName, installed.packages()[,1])){
install.packages(packageName)
}
else{
x <- paste(packageName, " is already installed")
print(x)
}
}
check_and_install_package("keras")
check_and_install_package("keras")
visualize_filter <- function(model, selected_filters, layer_names){
jitter <- list(im$Jitter(.05))
#Using python's deque to store the filter images
old_images = collections$deque()
python_index <- 0
r_index <- 1
#Generating the visualization for all the selected filters in the selected layers
for(layer_name in layer_names){
img = collections$deque()
old_images$append(img)
layer_idx <- visutils$utils$find_layer_idx(model, layer_names[[r_index]])
for(filter_num in selected_filters[[r_index]]){
old_filter <- kerasvis$visualize_activation(model, layer_idx, filter_indices=filter_num, tv_weight=0L, input_modifiers=jitter, max_iter=150L)
filter_name <- paste(layer_names[r_index], "pre_Filter", filter_num, sep="_")
plt$axis('off')
plt$title(filter_name)
plt$imshow(old_filter)
plt$savefig(filter_name ,bbox_inches='tight')
img$append(old_filter)
}
python_index = python_index + 1
r_index = r_index + 1
}
#Generating a better visualization for all the selected filters in the selected layers
# through increased iterations, regularization, and using the old visualization as a starting point.
python_index <- 0
r_index <- 1
jitter2 <- list(im$Jitter(.05))
new_images = collections$deque()
for(layer_name in layer_names){
temp_layer = old_images$popleft()
img = collections$deque()
new_images$append(img)
layer_idx <- visutils$utils$find_layer_idx(model, layer_names[[r_index]])
for(filter_num in selected_filters[[r_index]]){
new_filter <- kerasvis$visualize_activation(model, layer_idx, filter_indices=filter_num, seed_input=temp_layer$popleft() , input_modifiers=jitter2)
filter_name <- paste(layer_names[r_index], "post_Filter", filter_num, sep="_")
plt$axis('off')
plt$title(filter_name)
plt$imshow(new_filter)
plt$savefig(filter_name ,bbox_inches='tight')
img$append(new_filter)
}
#Generating a image pallete with 4 columns for all the layers
stitched <- visutils$utils$stitch_images(new_images[python_index], cols=4L)
plt$figure(figsize=c(20,30))
name <- paste(layer_names[r_index], "",  sep="")
plt$axis('off')
plt$title(name)
plt$imshow(stitched)
plt$savefig(name ,bbox_inches='tight')
plt$show()
python_index = python_index + 1
r_index = r_index + 1
}
}
rm(list=ls())
library(reticulate)
library(keras)
use_condaenv("visualizeCNN")
plt <-import("matplotlib.pyplot")
collections <- import("collections")
kerasvis <- import("vis.visualization")
conda_install("visualizeCNN","keras-vis")
plt <-import("matplotlib.pyplot")
rm(list=ls())
plt <-import("matplotlib.pyplot")
use_condaenv("visualizeCNN")
rm(list=ls())
use_condaenv("visualizeCNN")
plt <-import("matplotlib.pyplot")
scipy <- import("scipy")
ls()
conda_list()
virtualenv_list()
reticulate
use_virtualenv("r-reticulate")
ls()
rm(list=ls())
plt <-import("matplotlib.pyplot")
im <<- import("vis.input_modifiers")
setwd("/Users/kyungseo/Desktop/CSAFE/KerasVis/CSAFE/KerasVis/R")
source("visualize_filters.R")
source("check_and_install_package.R")
check_and_install_package("keras")
library(keras)
check_and_install_package("reticulate")
library(reticulate)
#Changing reticulate to use python 3
try(reticulate::use_python(python = '/anaconda3/bin/python3', required = T))
kerasvis <- import("vis.visualization")
visutils <- import("vis.utils")
im <<- import("vis.input_modifiers")
plt <<-import("matplotlib.pyplot")
collections <<- import("collections")
model <<- application_vgg16(weights = 'imagenet', include_top = TRUE)
selected_filters <- list(list(41L))#, 42L), list(5L,200L))
layer_names <- list("block5_conv3")#, "predictions")
visualize_filter(model, selected_filters, layer_names)
setwd("/Users/kyungseo/Desktop/CSAFE/KerasVis/CSAFE/KerasVis/R")
source("visualize_filters.R")
source("check_and_install_package.R")
visualize_filter(model, selected_filters, layer_names)
library(KerasVis)
library(KerasVis)
import_all_dependendices()
library(reticulate)
a <- import("theanos")
tryCatch( import("theanos"), error = function() {print("thenaos no")})
tryCatch( import("theanos"), error = function() {print("thenaos no")})
?tryCatch
tryCatch( import("theanos"), error = function(e) {print("thenaos no")})
tryCatch( import("keras"), error = function(e) {print("thenaos no")})
tryCatch( import("fibo"), error = function(e) {print("thenaos no")})
tryCatch( fibo <<- import("fibo"),
error = function(e) {
py_install("fibo")
fibo <<- import("fibo")
})
fibo <<- import("fibo")
tryCatch( fibo <<- import("pandas"),
error = function(e) {
py_install("fibo")
fibo <<- import("fibo")
})
tryCatch( fibo <<- import("pandas"),
error = function(e) {
py_install("fibo")
fibo <<- import("fibo")
})
tryCatch( fibo <<- import("fibo"),
error = function(e) {
py_install("fibo")
fibo <<- import("fibo")
})
#Changing reticulate to use python 3
try(reticulate::use_python(python = '/anaconda3/bin/python3', required = T))
tryCatch( fibo <<- import("fibo"),
error = function(e) {
py_install("fibo")
fibo <<- import("fibo")
})
fibo <<- import("fibo")
tryCatch( fibo <<- import("fibo"),
error = function(e) {
conda_install("fibo")
fibo <<- import("fibo")
})
tryCatch( fibo <<- import("scipy"),
error = function(e) {
conda_install("fibo")
fibo <<- import("fibo")
})
tryCatch( fibo <<- import("SymPy"),
error = function(e) {
conda_install("fibo")
fibo <<- import("fibo")
})
tryCatch( fibo <<- import("SymPy"),
error = function(e) {
conda_install("SymPy")
fibo <<- import("Sympy")
})
conda_create("r-reticulate")
tryCatch( fibo <<- import("fibo"),
error = function(e) {
conda_install( "r-reticulate","fibo")
fibo <<- import("fibo")
})
conda_install("r-reticulate","fibo")
tryCatch( fibo <<- import("sympy"),
error = function(e) {
conda_install("r-reticulate","sympy")
fibo <<- import("sympy")
})
a <- import("theano")
tryCatch( fibo <<- import("theano"),
error = function(e) {
conda_install("r-reticulate","theano")
theano <<- import("theano")
})
a <- import("theano")
use_condaenv("r-reticulate")
theano <<- import("theano")
a <- import("theano")
use_condaenv("r-reticulate")
theano <<- import("theano")
use_condaenv("r-reticulate")
theano <<- import("theano")
use_condaenv("r-reticulate")
use_condaenv("r-reticulate" required = TRUE)
use_condaenv("r-reticulate", required = TRUE)
theano <<- import("theano")
conda_list()
try(reticulate::use_python(python = '/anaconda3/envs/r-reticulate/bin/python', required = T))
theano <<- import("theano")
conda_install("r-reticulate","theano")
theano <<- import("theano")
use_condaenv(condaenv = "r-reticulate", conda = "/opt/anaconda3/bin/conda")
use_condaenv(condaenv = "r-reticulate", conda = "/anaconda3/bin/python3")
try(reticulate::use_python(python = '/anaconda3/bin/python3', required = T))
use_condaenv("r-reticulate", required = TRUE)
theano <<- import("theano")
py_config()
kerasvis <<- import("vis.visualization")
py_config()
py_discover_config()
kerasvis <<- import("vis.visualization")
visutils <<- import("vis.utils")
im <<- import("vis.input_modifiers")
py_config()
py_config()
py_config()
?import
theano <<- import("theano", path="/anaconda3/envs/r-reticulate/lib/python3.7/site-packages/")
theano <<- import("theano", path="/anaconda3/envs/r-reticulate/lib/python3.7/site-packages/theano")
theano <<- import("theano", path="/anaconda3/envs/r-reticulate")
theano <<- import("theano", path="./anaconda3/envs/r-reticulate")
theano <<- import("theano","/anaconda3/envs/r-reticulate")
theano <<- import("theano","/anaconda3/envs/r-reticulate/lib/python3.7/site-packages")
theano <<- import("theano","/anaconda3/envs/r-reticulate/lib/python3.7/site-packages/theano")
theano <<- import("theano","/anaconda3/envs/r-reticulate")
py_config()
theano <<- import("theano","/anaconda3/envs/r-reticulate")
py_config()
try(reticulate::use_python(python = '/anaconda3/envs/r-reticulate/lib/python3.7', required = T))
use_condaenv(condaenv = "r-reticulate")
theano <<- import("theano")
py_config()
View(visutils)
sys<- import("sys")
sys$executable
theano <<- import("theano")
theano <<- import("theano")
theano <<- import("theano")
theano <<- import("theano")
theano <<- import("fibo")
import_all_dependendices()
library(KerasVis)
library(KerasVis)
library(KerasVis)
library(KerasVis)
import_all_dependendices()
selected_filters <- list(list(41L))#, 42L), list(5L,200L))
layer_names <- list("block5_conv3")#, "predictions")
model <- application_vgg16(weights = 'imagenet', include_top = TRUE)
visualize_filter(model, selected_filters, layer_names)
library(KerasVis)
library(KerasVis)
library(KerasVis)
library(KerasVis)
import_all_dependendices()
os$makedirs("Images")
model <- application_vgg16(weights = 'imagenet', include_top = TRUE)
model.name
model
library(KerasVis)
os$mkdir(save_folder)
library(KerasVis)
library(KerasVis)
import_all_dependendices()
library(KerasVis)
library(KerasVis)
library(KerasVis)
library(KerasVis)
reticulate::py_config()
system("Sys.setenv(RETICULATE_PYTHON = '/usr/local/bin/python3')")
system("echo Sys.setenv(RETICULATE_PYTHON = '/usr/local/bin/python3')")
py_config()
library(keras)
check_and_install_package("reticulate")
library(reticulate)
library(reticulate)
py_config()
system("echo Sys.setenv(RETICULATE_PYTHON = '~/anaconda3/bin/python3') > .Rprofile")
modelecho Sys.setenv(RETICULATE_PYTHON = '~/anaconda3/bin/python3') > .Rprofile
echo Sys.setenv(RETICULATE_PYTHON = '~/anaconda3/bin/python3') > .Rprofile
system("echo "Sys.setenv(RETICULATE_PYTHON = '~/anaconda3/bin/python3')" > .Rprofile")
py_config()
echo "Sys.setenv(RETICULATE_PYTHON = '~/anaconda3/bin/python3')" > .Rprofile
py_config()
reticulate::py_config()
library(keras)
check_and_install_package("reticulate")
library(reticulate)
py_config()
reticulate::py_config()
library(reticulate)
reticulate::py_config()
library(reticulate)
reticulate::py_config()
conda_install("kerasvis")
check_and_install_package("reticulate")
library(reticulate)
check_and_install_package <- function(packageName){
if (!is.element(packageName, installed.packages()[,1])){
install.packages(packageName)
x <- paste(packageName, "successfully installed.")
}
else{
x <- paste(packageName, "is already installed")
message(x)
}
}
check_and_install_package("reticulate")
library(reticulate)
set_up_virtualenv <- function(){
check_and_install_package("reticulate")
library(reticulate)
conda_install("kerasvis")
conda_install("kerasvis", "matplotlib")
conda_install("kerasvis", "keras-vis", pip = TRUE)
}
set_up_virtualenv()
conda_list()
set_up_virtualenv <- function(){
check_and_install_package("reticulate")
library(reticulate)
conda_install("kerasvis", "matplotlib")
conda_install("kerasvis", "keras-vis", pip = TRUE)
}
set_up_virtualenv()
import_all_dependendices <- function(){
check_and_install_package("keras")
library(keras)
check_and_install_package("reticulate")
library(reticulate)
#Changing reticulate to use python 3
try(reticulate::use_python(python = '~/anaconda3/envs/kerasvis/bin/python', required = T))
kerasvis <<- import("vis.visualization")
visutils <<- import("vis.utils")
im <<- import("vis.input_modifiers")
plt <<-import("matplotlib.pyplot")
collections <<- import("collections")
os <<- import("os")
}
py_config()
import
import_all_dependendices()
#Changing reticulate to use python 3
try(reticulate::use_python(python = '~/anaconda3/envs/kerasvis/bin/python', required = T))
py_config()
use_condaenv("kerasvis")
py_config()
#Changing reticulate to use python 3
try(reticulate::use_python(python = '/anaconda3/envs/kerasvis/bin/python', required = T))
#Changing reticulate to use python 3
try(reticulate::use_python(python = '/anaconda3/envs/kerasvis/bin/python', required = T))
py_config()
j <- import("theano")
use_condaenv("kerasvis")
j <- import("theano")
?conda_install
conda_install("kerasvis", "theano")
j <- import("theano")
conda_install("kerasvis", "theano")
use_condaenv("kerasvis", required = TRUE)
j <- import("theano")
py_run_string('import theano')
#Changing reticulate to use python 3
try(reticulate::use_python(python = '~/anaconda3/envs/kerasvis/bin/python', required = T))
conda_list()
conda_version()
conda_python()
use_condaenv(kerasvis)
use_condaenv("kerasvis", required = TRUE)
list
list.files()
j <- import("theano")
#Changing reticulate to use python 3
try(reticulate::use_python(python = '/anaconda3/envs/kerasvis/bin/python', required = T))
j <- import("theano")
library(keras)
library(reticulate)
py_config()
j <- import("theano")
collections <<- import("collections")
plt <<-import("matplotlib.pyplot")
j <- import("theano")
plt <<-import("matplotlib.pyplot")
collections <<- import("collections")
im <<- import("vis.input_modifiers")
kerasvis <<- import("vis.visualization")
visutils <<- import("vis.utils")
im <<- import("vis.input_modifiers")
im <<- import("vis.input_modifiers")
kerasvis <<- import("vis.visualization")
kerasvis <<- import("vis.visualization")
visutils <<- import("vis.utils")
im <<- import("vis.input_modifiers")
plt <<-import("matplotlib.pyplot")
collections <<- import("collections")
os <<- import("os")
conda_install("kerasvis", "matplotlib")
plt <<-import("matplotlib.pyplot")
py_available()
py_config()
conda_remove("kerasvis")
